#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <curl/curl.h>

#define HTTP_OK 200L
#define REQUEST_TIMEOUT_SECONDS 2L

#define URL_OK 0
#define URL_ERROR 1
#define URL_UNKNOWN 2

#define MAX_PROCESSES 1024

typedef struct {
	int ok, error, unknown;
} UrlStatus;

void usage() {
	fprintf(stderr, "usage:\n\t./ex2 FILENAME NUMBER_OF_PROCESSES\n");
	exit(EXIT_FAILURE);
}

int check_url(const char *url) {
	CURL *curl;
	CURLcode res;
	long response_code = 0L;

	curl = curl_easy_init();

	if(curl) {
		curl_easy_setopt(curl, CURLOPT_URL, url);
		curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
		curl_easy_setopt(curl, CURLOPT_TIMEOUT, REQUEST_TIMEOUT_SECONDS);
		curl_easy_setopt(curl, CURLOPT_NOBODY, 1L); /* do a HEAD request */

		res = curl_easy_perform(curl);
		if(res == CURLE_OK) {
			curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);
			if (response_code == HTTP_OK) {
				return URL_OK;
			} else {
				return URL_ERROR;
			}
		}

		curl_easy_cleanup(curl);
	}

	return URL_UNKNOWN;
}

void serial_checker(const char *filename) {
	UrlStatus results = {0};
	FILE *toplist_file;
	char *line = NULL;
	size_t len = 0;
	ssize_t read;
	toplist_file = fopen(filename, "r");
	if (toplist_file == NULL) {
		exit(EXIT_FAILURE);
	}
	while ((read = getline(&line, &len, toplist_file)) != -1)
	{
		if (read == -1)
		{
			perror("unable to read line from file");
		}
		line[read-1] = '\0'; /* null-terminate the URL */
		switch (check_url(line))
		{
		case URL_OK:
			results.ok += 1;
			break;
		case URL_ERROR:
			results.error += 1;
			break;
		default:
			results.unknown += 1;
		}
	}

	free(line);
	fclose(toplist_file);

	printf("%d OK, %d Error, %d Unknown\n",
			results.ok,
			results.error,
			results.unknown);
}

void worker_checker(const char *filename, int pipe_write_fd, int worker_id, int workers_number) {
	/*
	 * TODO: this checker function should operate almost like serial_checker(), except:
	 * 1. Only processing a distinct subset of the lines (hint: think Modulo)
	 * 2. Writing the results back to the parent using the pipe_write_fd (i.e. and not to the screen)
	 */
	FILE *toplist_file;
	UrlStatus results = {0};
	char *line = NULL;
	size_t len = 0;
	ssize_t read;
	toplist_file = fopen(filename, "r");
	int count=0;

	/* open file with read permissions */
	if (toplist_file == NULL)
	{
		exit(EXIT_FAILURE);
	}
	/* reads a new line from toplist_file each iteration, and prints the results into the results's struct. */
	while ((read = getline(&line, &len, toplist_file)) != -1)
	{
		if (read == -1)
		{
			perror("unable to read line from file");
		}
		/* process only number of lines modulo workers_number per each worker (process) in order to handle only distinct lines. */
		if(count % workers_number == worker_id)
		{
			line[read-1] = '\0'; /* null-terminate the URL */
			switch (check_url(line))
			{
			case URL_OK:
				results.ok += 1;
				break;
			case URL_ERROR:
				results.error += 1;
				break;
			default:
				results.unknown += 1;
			}
		}
		count++;
	}
	free(line);
	fclose(toplist_file);

	if(write(pipe_write_fd, &results, sizeof(results)) < 0)
	{
		perror("unable to write to pipe");
	}
}

void parallel_checker(const char *filename, int number_of_processes)
{
	/*
	 * TODO:
	 * 1. Start number_of_processes new workers (i.e. processes running the worker_checker function)
	 * 2. Collect the results from all the workers
	 * 3. Print the accumulated results
	 */
	int i, ok_number=0, error_number=0, unknown_number=0;
	UrlStatus temp = {0};
	int pipes_fd[2];

	for(i = 0; i < number_of_processes; i++)
	{
		/* cehck for pipe failure */
		if(pipe(pipes_fd) == -1)
		{
			printf("done");
			perror("Unable to allocate memory");
			exit(EXIT_FAILURE);
		}

		/* Children */
		if (fork() == 0)
		{
			close(pipes_fd[0]); /* safety first */
			worker_checker(filename, pipes_fd[1], i, number_of_processes);
			close(pipes_fd[1]);
			exit(0);
		}
	}

	// Parent code, children returned already.

	close(pipes_fd[1]);  /* safety first */
	for(i = 0; i < number_of_processes; i++)
	{
		/* check for read error */
		if(read(pipes_fd[0] , &temp , sizeof(UrlStatus)) < 0)
		{
			perror("Parent was unable to read from pipe");
			exit(EXIT_FAILURE);
		}
		/*  update the error, ok and unknown counters. */
		error_number += temp.error;
		ok_number += temp.ok;
		unknown_number += temp.unknown;
	}
	 /* all done with the pipe */
	close(pipes_fd[0]);
	/* father waits for all children to return */
	for(i = 0; i < number_of_processes; i++)
	{
		wait(NULL);
	}
	printf("%d OK, %d Error, %d Unknown\n",
			ok_number,
			error_number,
			unknown_number);
}

int main(int argc, char **argv)
{
	if (argc != 3)
	{
		usage();
	}
	else if (atoi(argv[2]) == 1)
	{
		serial_checker(argv[1]);
	}
	else
	{
		parallel_checker(argv[1], atoi(argv[2]));
	}

	return EXIT_SUCCESS;
}

